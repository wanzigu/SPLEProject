package io.searchbox.snapshot;

/*Generated by MPS */

import io.searchbox.action.GenericResultAbstractAction;
import io.searchbox.action.AbstractAction;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.Collection;
import org.apache.commons.lang3.StringUtils;

public abstract class AbstractSnapshotAction extends GenericResultAbstractAction {

  private String repository;
  private String snapshots;
  protected AbstractSnapshotAction(AbstractSnapshotAction.SnapshotBuilder builder) {
    super(builder);
    this.repository = builder.repository;
    this.snapshots = builder.getSnapshots();
    setURI(buildURI());
  }
  @Override
  protected String buildURI() {
    return super.buildURI() + "/_snapshot/" + repository + "/" + snapshots;
  }
  public static abstract class SnapshotBuilder<T extends AbstractSnapshotAction, K> extends AbstractAction.Builder<T, K> {
    protected String repository;
    protected SnapshotBuilder(String repository) {
      this.repository = repository;
    }
    protected abstract String getSnapshots();
  }
  public static abstract class SingleSnapshotBuilder<T extends AbstractSnapshotAction, K> extends AbstractSnapshotAction.SnapshotBuilder<T, K> {
    private String snapshot;
    public SingleSnapshotBuilder(String repository, String snapshot) {
      super(repository);
      this.snapshot = snapshot;
    }
    @Override
    protected String getSnapshots() {
      return snapshot;
    }
  }
  @SuppressWarnings(value = "unchecked")
  public static abstract class MultipleSnapshotBuilder<T extends AbstractSnapshotAction, K> extends AbstractSnapshotAction.SnapshotBuilder<T, K> {
    private Set<String> snapshots = new LinkedHashSet<String>();
    public MultipleSnapshotBuilder(String repository) {
      super(repository);
    }
    public K addSnapshot(Collection<? extends String> snapshots) {
      this.snapshots.addAll(snapshots);
      return (K) this;
    }
    public K addSnapshot(String snapshot) {
      this.snapshots.add(snapshot);
      return (K) this;
    }
    @Override
    protected String getSnapshots() {
      if (snapshots.isEmpty()) {
        return "_all";
      } else {
        return StringUtils.join(snapshots, ",");
      }
    }
  }
}
