package io.searchbox.core.search.aggregation;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

public class DateRangeAggregation extends BucketAggregation {

  public static final String TYPE = "date_range";
  private List<DateRangeAggregation.DateRange> ranges = new LinkedList<DateRangeAggregation.DateRange>();
  public DateRangeAggregation(String name, JsonObject dateRangeAggregation) {
    super(name, dateRangeAggregation);
    if (dateRangeAggregation.has(String.valueOf(AggregationField.BUCKETS)) && dateRangeAggregation.get(String.valueOf(AggregationField.BUCKETS)).isJsonArray()) {
      parseBuckets(dateRangeAggregation.get(String.valueOf(AggregationField.BUCKETS)).getAsJsonArray());
    }
  }
  private void parseBuckets(JsonArray buckets) {
    // todo support keyed:true as well 
    for (JsonElement bucketv : buckets) {
      JsonObject bucket = bucketv.getAsJsonObject();
      DateRangeAggregation.DateRange range = new DateRangeAggregation.DateRange(bucket, (bucket.has(String.valueOf(AggregationField.FROM)) ? bucket.get(String.valueOf(AggregationField.FROM)).getAsDouble() : null), (bucket.has(String.valueOf(AggregationField.TO)) ? bucket.get(String.valueOf(AggregationField.TO)).getAsDouble() : null), bucket.get(String.valueOf(AggregationField.DOC_COUNT)).getAsLong(), (bucket.has(String.valueOf(AggregationField.FROM_AS_STRING)) ? bucket.get(String.valueOf(AggregationField.FROM_AS_STRING)).getAsString() : null), (bucket.has(String.valueOf(AggregationField.TO_AS_STRING)) ? bucket.get(String.valueOf(AggregationField.TO_AS_STRING)).getAsString() : null));
      ranges.add(range);
    }
  }
  public List<DateRangeAggregation.DateRange> getBuckets() {
    return ranges;
  }
  public class DateRange extends Range {
    private String fromAsString;
    private String toAsString;
    public DateRange(JsonObject bucket, Double from, Double to, Long count, String fromString, String toString) {
      super(bucket, from, to, count);
      this.fromAsString = fromString;
      this.toAsString = toString;
    }
    /**
     * @return From time as a string, or null if not specified
     */
    public String getFromAsString() {
      return fromAsString;
    }
    /**
     * @return To time as a string, or null if not specified
     */
    public String getToAsString() {
      return toAsString;
    }
    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (!((o instanceof DateRangeAggregation.DateRange))) {
        return false;
      }
      if (!(super.equals(o))) {
        return false;
      }
      DateRangeAggregation.DateRange rhs = (DateRangeAggregation.DateRange) o;
      return new EqualsBuilder().append(fromAsString, rhs.fromAsString).append(toAsString, rhs.toAsString).isEquals();
    }
    @Override
    public int hashCode() {
      return new HashCodeBuilder().appendSuper(super.hashCode()).append(fromAsString).append(toAsString).toHashCode();
    }
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!((o instanceof DateRangeAggregation))) {
      return false;
    }
    DateRangeAggregation rhs = (DateRangeAggregation) o;
    return new EqualsBuilder().append(getBuckets(), rhs.getBuckets()).isEquals();
  }
  @Override
  public int hashCode() {
    return new HashCodeBuilder().append(getBuckets()).toHashCode();
  }
}
