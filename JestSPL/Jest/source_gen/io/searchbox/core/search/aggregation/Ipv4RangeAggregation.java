package io.searchbox.core.search.aggregation;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

public class Ipv4RangeAggregation extends BucketAggregation {

  public static final String TYPE = "ip_range";
  private List<Ipv4RangeAggregation.Ipv4Range> ranges = new LinkedList<Ipv4RangeAggregation.Ipv4Range>();
  public Ipv4RangeAggregation(String name, JsonObject ipv4RangeAggregation) {
    super(name, ipv4RangeAggregation);
    if (ipv4RangeAggregation.has(String.valueOf(AggregationField.BUCKETS)) && ipv4RangeAggregation.get(String.valueOf(AggregationField.BUCKETS)).isJsonArray()) {
      parseBuckets(ipv4RangeAggregation.get(String.valueOf(AggregationField.BUCKETS)).getAsJsonArray());
    }
  }
  private void parseBuckets(JsonArray bucketsSource) {
    for (JsonElement bucketv : bucketsSource) {
      JsonObject bucket = bucketv.getAsJsonObject();
      Ipv4RangeAggregation.Ipv4Range range = new Ipv4RangeAggregation.Ipv4Range(bucket, (bucket.has(String.valueOf(AggregationField.FROM)) ? bucket.get(String.valueOf(AggregationField.FROM)).getAsDouble() : null), (bucket.has(String.valueOf(AggregationField.TO)) ? bucket.get(String.valueOf(AggregationField.TO)).getAsDouble() : null), bucket.get(String.valueOf(AggregationField.DOC_COUNT)).getAsLong(), (bucket.has(String.valueOf(AggregationField.FROM_AS_STRING)) ? bucket.get(String.valueOf(AggregationField.FROM_AS_STRING)).getAsString() : null), (bucket.has(String.valueOf(AggregationField.TO_AS_STRING)) ? bucket.get(String.valueOf(AggregationField.TO_AS_STRING)).getAsString() : null));
      ranges.add(range);
    }
  }
  public List<Ipv4RangeAggregation.Ipv4Range> getBuckets() {
    return ranges;
  }
  public class Ipv4Range extends Range {
    private String fromAsString;
    private String toAsString;
    public Ipv4Range(JsonObject bucket, Double from, Double to, Long count, String fromString, String toString) {
      super(bucket, from, to, count);
      this.fromAsString = fromString;
      this.toAsString = toString;
    }
    public String getFromAsString() {
      return fromAsString;
    }
    public String getToAsString() {
      return toAsString;
    }
    @Override
    public boolean equals(Object obj) {
      if (obj == null) {
        return false;
      }
      if (obj == this) {
        return true;
      }
      if (obj.getClass() != getClass()) {
        return false;
      }
      Ipv4RangeAggregation.Ipv4Range rhs = (Ipv4RangeAggregation.Ipv4Range) obj;
      return new EqualsBuilder().appendSuper(super.equals(obj)).append(toAsString, rhs.toAsString).append(fromAsString, rhs.fromAsString).isEquals();
    }
    @Override
    public int hashCode() {
      return new HashCodeBuilder().appendSuper(super.hashCode()).append(toAsString).append(fromAsString).toHashCode();
    }
  }
  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    if (obj.getClass() != getClass()) {
      return false;
    }
    Ipv4RangeAggregation rhs = (Ipv4RangeAggregation) obj;
    return new EqualsBuilder().appendSuper(super.equals(obj)).append(ranges, rhs.ranges).isEquals();
  }
  @Override
  public int hashCode() {
    return new HashCodeBuilder().appendSuper(super.hashCode()).append(ranges).toHashCode();
  }
}
