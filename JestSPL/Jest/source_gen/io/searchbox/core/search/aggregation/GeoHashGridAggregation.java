package io.searchbox.core.search.aggregation;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

public class GeoHashGridAggregation extends BucketAggregation {

  public static final String TYPE = "geohash_grid";
  private List<GeoHashGridAggregation.GeoHashGrid> geoHashGrids = new LinkedList<GeoHashGridAggregation.GeoHashGrid>();
  public GeoHashGridAggregation(String name, JsonObject geohashGridAggregation) {
    super(name, geohashGridAggregation);
    if (geohashGridAggregation.has(String.valueOf(AggregationField.BUCKETS)) && geohashGridAggregation.get(String.valueOf(AggregationField.BUCKETS)).isJsonArray()) {
      parseBuckets(geohashGridAggregation.get(String.valueOf(AggregationField.BUCKETS)).getAsJsonArray());
    }
  }
  private void parseBuckets(JsonArray bucketsSource) {
    for (JsonElement bucketElement : bucketsSource) {
      JsonObject bucket = bucketElement.getAsJsonObject();
      GeoHashGridAggregation.GeoHashGrid geoHashGrid = new GeoHashGridAggregation.GeoHashGrid(bucket, bucket.get(String.valueOf(AggregationField.KEY)).getAsString(), bucket.get(String.valueOf(AggregationField.DOC_COUNT)).getAsLong());
      geoHashGrids.add(geoHashGrid);
    }
  }
  public List<GeoHashGridAggregation.GeoHashGrid> getBuckets() {
    return geoHashGrids;
  }
  public static class GeoHashGrid extends Bucket {
    private String key;
    public GeoHashGrid(JsonObject bucket, String key, Long count) {
      super(bucket, count);
      this.key = key;
    }
    public String getKey() {
      return key;
    }
    @Override
    public boolean equals(Object obj) {
      if (obj == null) {
        return false;
      }
      if (obj == this) {
        return true;
      }
      if (obj.getClass() != getClass()) {
        return false;
      }
      GeoHashGridAggregation.GeoHashGrid rhs = (GeoHashGridAggregation.GeoHashGrid) obj;
      return new EqualsBuilder().appendSuper(super.equals(obj)).append(key, rhs.key).isEquals();
    }
    @Override
    public int hashCode() {
      return new HashCodeBuilder().appendSuper(super.hashCode()).append(key).toHashCode();
    }
  }
  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    if (obj.getClass() != getClass()) {
      return false;
    }
    GeoHashGridAggregation rhs = (GeoHashGridAggregation) obj;
    return new EqualsBuilder().appendSuper(super.equals(obj)).append(geoHashGrids, rhs.geoHashGrids).isEquals();
  }
  @Override
  public int hashCode() {
    return new HashCodeBuilder().appendSuper(super.hashCode()).append(geoHashGrids).toHashCode();
  }
}
