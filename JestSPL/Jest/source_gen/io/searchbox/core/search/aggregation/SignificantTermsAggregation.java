package io.searchbox.core.search.aggregation;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

public class SignificantTermsAggregation extends BucketAggregation {

  public static final String TYPE = "significant_terms";
  private Long totalCount;
  private List<SignificantTermsAggregation.SignificantTerm> significantTerms = new LinkedList<SignificantTermsAggregation.SignificantTerm>();
  public SignificantTermsAggregation(String name, JsonObject significantTermsAggregation) {
    super(name, significantTermsAggregation);
    if (significantTermsAggregation.has(String.valueOf(AggregationField.BUCKETS)) && significantTermsAggregation.get(String.valueOf(AggregationField.BUCKETS)).isJsonArray()) {
      parseBuckets(significantTermsAggregation.get(String.valueOf(AggregationField.BUCKETS)).getAsJsonArray());
    }
    if (significantTermsAggregation.has(String.valueOf(AggregationField.DOC_COUNT))) {
      totalCount = significantTermsAggregation.get(String.valueOf(AggregationField.DOC_COUNT)).getAsLong();
    }
  }
  private void parseBuckets(JsonArray bucketsSource) {
    for (JsonElement bucketv : bucketsSource) {
      JsonObject bucket = bucketv.getAsJsonObject();
      SignificantTermsAggregation.SignificantTerm term = new SignificantTermsAggregation.SignificantTerm(bucket, bucket.get(String.valueOf(AggregationField.KEY)).getAsString(), bucket.get(String.valueOf(AggregationField.DOC_COUNT)).getAsLong(), bucket.get(String.valueOf(AggregationField.SCORE)).getAsDouble(), bucket.get(String.valueOf(AggregationField.BG_COUNT)).getAsLong());
      significantTerms.add(term);
    }
  }
  /**
   * @return total count of documents matching foreground aggregation if found, null otherwise
   */
  public Long getTotalCount() {
    return totalCount;
  }
  public List<SignificantTermsAggregation.SignificantTerm> getBuckets() {
    return significantTerms;
  }
  public class SignificantTerm extends Bucket {
    private String key;
    private Double score;
    private Long backgroundCount;
    public SignificantTerm(JsonObject bucket, String key, Long count, Double score, Long backgroundCount) {
      super(bucket, count);
      this.key = key;
      this.score = score;
      this.backgroundCount = backgroundCount;
    }
    public String getKey() {
      return key;
    }
    public Double getScore() {
      return score;
    }
    public Long getBackgroundCount() {
      return backgroundCount;
    }
    @Override
    public boolean equals(Object obj) {
      if (obj == null) {
        return false;
      }
      if (obj == this) {
        return true;
      }
      if (obj.getClass() != getClass()) {
        return false;
      }
      SignificantTermsAggregation.SignificantTerm rhs = (SignificantTermsAggregation.SignificantTerm) obj;
      return new EqualsBuilder().appendSuper(super.equals(obj)).append(key, rhs.key).append(score, rhs.score).append(backgroundCount, rhs.backgroundCount).isEquals();
    }
    @Override
    public int hashCode() {
      return new HashCodeBuilder().appendSuper(super.hashCode()).append(backgroundCount).append(key).append(score).toHashCode();
    }
  }
  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    if (obj.getClass() != getClass()) {
      return false;
    }
    SignificantTermsAggregation rhs = (SignificantTermsAggregation) obj;
    return new EqualsBuilder().appendSuper(super.equals(obj)).append(totalCount, rhs.totalCount).append(significantTerms, rhs.significantTerms).isEquals();
  }
  @Override
  public int hashCode() {
    return new HashCodeBuilder().appendSuper(super.hashCode()).append(totalCount).append(significantTerms).toHashCode();
  }
}
