package io.searchbox.core.search.aggregation;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

public class DateHistogramAggregation extends BucketAggregation {

  public static final String TYPE = "date_histogram";
  private List<DateHistogramAggregation.DateHistogram> dateHistograms = new LinkedList<DateHistogramAggregation.DateHistogram>();
  public DateHistogramAggregation(String name, JsonObject dateHistogramAggregation) {
    super(name, dateHistogramAggregation);
    if (dateHistogramAggregation.has(String.valueOf(AggregationField.BUCKETS)) && dateHistogramAggregation.get(String.valueOf(AggregationField.BUCKETS)).isJsonArray()) {
      parseBuckets(dateHistogramAggregation.get(String.valueOf(AggregationField.BUCKETS)).getAsJsonArray());
    }
  }
  private void parseBuckets(JsonArray bucketsSource) {
    for (JsonElement bucket : bucketsSource) {
      Long time = bucket.getAsJsonObject().get(String.valueOf(AggregationField.KEY)).getAsLong();
      String timeAsString = bucket.getAsJsonObject().get(String.valueOf(AggregationField.KEY_AS_STRING)).getAsString();
      Long count = bucket.getAsJsonObject().get(String.valueOf(AggregationField.DOC_COUNT)).getAsLong();
      dateHistograms.add(new DateHistogramAggregation.DateHistogram(bucket.getAsJsonObject(), time, timeAsString, count));
    }
  }
  /**
   * @return List of DateHistogram objects if found, or empty list otherwise
   */
  public List<DateHistogramAggregation.DateHistogram> getBuckets() {
    return dateHistograms;
  }
  public class DateHistogram extends HistogramAggregation.Histogram {
    private String timeAsString;
    /*package*/ DateHistogram(JsonObject bucket, Long time, String timeAsString, Long count) {
      super(bucket, time, count);
      this.timeAsString = timeAsString;
    }
    public Long getTime() {
      return getKey();
    }
    public String getTimeAsString() {
      return timeAsString;
    }
    @Override
    public boolean equals(Object obj) {
      if (obj == null) {
        return false;
      }
      if (obj == this) {
        return true;
      }
      if (obj.getClass() != getClass()) {
        return false;
      }
      DateHistogramAggregation.DateHistogram rhs = (DateHistogramAggregation.DateHistogram) obj;
      return new EqualsBuilder().appendSuper(super.equals(obj)).append(timeAsString, rhs.timeAsString).isEquals();
    }
    @Override
    public int hashCode() {
      return new HashCodeBuilder().appendSuper(super.hashCode()).append(timeAsString).toHashCode();
    }
  }
  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    if (obj.getClass() != getClass()) {
      return false;
    }
    DateHistogramAggregation rhs = (DateHistogramAggregation) obj;
    return new EqualsBuilder().appendSuper(super.equals(obj)).append(dateHistograms, rhs.dateHistograms).isEquals();
  }
  @Override
  public int hashCode() {
    return new HashCodeBuilder().appendSuper(super.hashCode()).append(dateHistograms).toHashCode();
  }
}
