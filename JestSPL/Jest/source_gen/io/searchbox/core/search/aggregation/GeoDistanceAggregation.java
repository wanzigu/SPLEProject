package io.searchbox.core.search.aggregation;

/*Generated by MPS */

import java.util.List;
import java.util.LinkedList;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

public class GeoDistanceAggregation extends BucketAggregation {

  public static final String TYPE = "geo_distance";
  private List<Range> geoDistances = new LinkedList<Range>();
  public GeoDistanceAggregation(String name, JsonObject geoDistanceAggregation) {
    super(name, geoDistanceAggregation);
    if (geoDistanceAggregation.has(String.valueOf(AggregationField.BUCKETS)) && geoDistanceAggregation.get(String.valueOf(AggregationField.BUCKETS)).isJsonArray()) {
      parseBuckets(geoDistanceAggregation.get(String.valueOf(AggregationField.BUCKETS)).getAsJsonArray());
    }
  }
  private void parseBuckets(JsonArray buckets) {
    // todo support keyed:true as well 
    for (JsonElement bucketv : buckets) {
      JsonObject bucket = bucketv.getAsJsonObject();
      Range geoDistance = new Range(bucket, (bucket.has(String.valueOf(AggregationField.FROM)) ? bucket.get(String.valueOf(AggregationField.FROM)).getAsDouble() : null), (bucket.has(String.valueOf(AggregationField.TO)) ? bucket.get(String.valueOf(AggregationField.TO)).getAsDouble() : null), (bucket.has(String.valueOf(AggregationField.DOC_COUNT)) ? bucket.get(String.valueOf(AggregationField.DOC_COUNT)).getAsLong() : null));
      geoDistances.add(geoDistance);
    }
  }
  public List<Range> getBuckets() {
    return geoDistances;
  }
  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    if (obj.getClass() != getClass()) {
      return false;
    }
    GeoDistanceAggregation rhs = (GeoDistanceAggregation) obj;
    return new EqualsBuilder().appendSuper(super.equals(obj)).append(geoDistances, rhs.geoDistances).isEquals();
  }
  @Override
  public int hashCode() {
    return new HashCodeBuilder().appendSuper(super.hashCode()).append(geoDistances).toHashCode();
  }
}
