package io.searchbox.cluster;

/*Generated by MPS */

import io.searchbox.action.GenericResultAbstractAction;
import com.google.gson.JsonObject;
import io.searchbox.action.AbstractMultiINodeActionBuilder;

public class NodesHotThreads extends GenericResultAbstractAction {

  protected NodesHotThreads(NodesHotThreads.Builder builder) {
    super(builder);
    setURI(buildURI());
  }
  @Override
  protected String buildURI() {
    return super.buildURI() + "/_nodes/" + nodes + "/hot_threads";
  }
  @Override
  protected JsonObject parseResponseBody(String responseBody) {
    return new JsonObject();
  }
  @Override
  public String getRestMethodName() {
    return "GET";
  }
  public static class Builder extends AbstractMultiINodeActionBuilder<NodesHotThreads, NodesHotThreads.Builder> {
    public NodesHotThreads.Builder settings(boolean value) {
      return setParameter("settings", value);
    }
    /**
     * number of hot threads to provide, defaults to 3
     */
    public NodesHotThreads.Builder threads(Integer value) {
      return setParameter("threads", value);
    }
    /**
     * the interval to do the second sampling of threads. Defaults to 500ms
     */
    public NodesHotThreads.Builder interval(String value) {
      return setParameter("interval", value);
    }
    /**
     * The type to sample, defaults to cpu, but supports wait and block to see hot threads that are in wait or block state
     */
    public NodesHotThreads.Builder type(String value) {
      return setParameter("type", value);
    }
    @Override
    public NodesHotThreads build() {
      return new NodesHotThreads(this);
    }
  }
}
